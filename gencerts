#/bin/bash

#This script creates root CA and server certificates to be used by the client and the server.
# rootCA.crt needs to be copied to the client to replace the system-wide root CA set
# example.keystore needs to be referenced by keyStorePath in the server's config file
#
#TO EXECUTE FROM THE OUTSIDE WITH:
#ALTNAME=DNS:signal.sinesy.it ./gencerts
#
#IF YOU HAVE A DOMAIN OR
#ALTNAME=DNS:signal.sinesy.it ./gencerts
#
#
# Create private key for root CA certificate
openssl genrsa -out rootCA.key 4096

# Create a self-signed root CA certificate
openssl req -x509 -new -nodes  -days 3650 -out rootCA.crt -key rootCA.key

# Create server certificate key
openssl genrsa -out whisper.key 4096

# Create Certificate Signing Request
openssl req -new -key whisper.key -out whisper.csr

# Sign the certificate with the root CA

openssl x509 -req -in whisper.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -days 3650 -out whisper.crt -extensions extensions -extfile <(cat <<-EOF
[ extensions ]
basicConstraints=CA:FALSE
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer
subjectAltName=$ALTNAME
EOF
)

# Export to host key and certificate to PKCS12 format which is recognized by Java keytool
openssl pkcs12 -export -password pass:example -in whisper.crt -inkey whisper.key -out keystore.p12 -name example -CAfile rootCA.crt

# Import the host key and certificate to Java keystore format, so it can be used by dropwizard
keytool -importkeystore -srcstoretype PKCS12 -srckeystore keystore.p12 -srcstorepass example -destkeystore example.keystore -deststorepass example

#whisper.store DEVE andare dentro il client andropid
keytool -importcert -v -trustcacerts -file whisper.crt -alias IntermediateCA -keystore whisper.store -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath ~/data/java/Signal_prj/bcprov-jdk15on-154.jar -storetype BKS -storepass whisper

#per il client iOS basta convertire il whisper.crt in formato DER e installare whisper.cer in iOS
openssl x509 -in whisper.crt -out whisper.cer -outform DER

echo "parte applicativa riuscita"

#APN: apple push; si parte da apns-dev-cert.p12 e da apns-dev-key.p12
#
#eseguire questo SENZA mettera password
openssl pkcs12 -clcerts -nokeys -out apns-dev-cert.pem -in apns-dev-cert.p12

##eseguire questo NON mettendo PASSWORD la prima volta ma METTERE password la seconda volta
openssl pkcs12 -nocerts -out apns-dev-key.pem -in apns-dev-key.p12

#ultimo passaggio per rimuovere il DES dalla chiave
openssl rsa -in apns-dev-key.pem -out apns-dev-key-noenc.pem
#[OPZIONALE]verifica del certificatp con chiave senza DES
openssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert apns-dev-cert.pem -key apns-dev-key-noenc.pem
#[OPZIONALE]come passo precedente ma con chive criptata
openssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert apns-dev-cert.pem -key apns-dev-key.pem
